Language Specification:
 1 .Language Definition:
  1.1 Alphabet:
  1.1.a. Upper (A-Z) and lower case letters (a-z) of the English alphabet
      c. Decimal digits (0-9);
  Lexic:
      a.Special symbols, representing:
	 - operators + - * / == < <= = >=
	 - separators ( ) [ ] { }  : ; space
	 - reserved words:
			char else if int main read while write string float true false boolean not and or
      b.identifiers
	   -a sequence of letters and  digits, such that the first charater is a letter; the rule is:
	     identifier ::= letter{(letter|digit)}
	     letter ::= "A" | "B" | ... | "Z" | "a" | "b" | ... | "z" |
	     digit ::= "0" | "1" |...| "9"
      c.constants
        1.integer - rule:
            noconst=+no|-no|no
            no:=digit{no}
        2.character
            character:='letter'|'digit'
        3.string
            constchar:="string"
            string:=char{string}
            char:=letter|digit
        4.float
            float:= digit{digit} "," digit{digit} 
		  
 2.2 Syntax:
	The words - predefined tokens are specified between " and ":	
a) Sintactical rules:
    program ::= "main{" decllist ";" cmpdstmt "}"
    decllist ::= declaration | declaration ";" decllist
    declaration ::= type " " IDENTIFIER; 
    arraydec ::= type IDENTIFIER "[" nr "]"
    type ::= "boolean" | "char" | "integer" | "string" | "float"
    cmpdstmt ::= "{" stmtlist "}"
    stmtlist ::= stmt | stmt ";" stmtlist
    stmt ::= simplstmt | structstmt
    simplstmt ::= assignstmt | iostmt
    assignstmt ::= IDENTIFIER " = " expression
    expression ::= expression ("+" | "-") term | term
    term ::= term ("*" | "/") factor | factor
    factor ::= "(" expression ")" | IDENTIFIER
    iostmt ::= ("read" | "write") "(" IDENTIFIER ")"
    structstmt ::= cmpdstmt | ifstmt | whilestmt
    ifstmt  = "if" "(" condition ")" cmpdstmt [ "else" "{" cmpdstmt "}" ]
    whilestmt  = "while" "(" condition ")" cmpdstmt
    condition  = expression RELATION expression
  
b) lexical rules:
 IDENTIFIER ::= letter | letter{letter}{digit}
     letter ::= "A" | "B" | . ..| "Z" | "a" | "b" | ... | "z" |
      digit ::= "0" | "1" |...| "9"
   RELATION ::= "<" | "<=" | "=" | "<>" | ">=" | ">"


Codification:
-------------------------
| Token type	|   code |
-------------------------
| identifier	|    0  |
-------------------------
| constant	|    1  |
-------------------------
| main       |    2  | 
-------------------------
|  char	|    3  |
-------------------------
|    if		|    4  |
-------------------------
|    else	|    5  |
-------------------------
|  int      |    6  |
-------------------------
|  float  	|    7  |
-------------------------
| boolean       |    8  |
-------------------------
| read 	|    9  |
-------------------------
| write		|   10  |
-------------------------
|while		|   11  |
-------------------------
|string 		|   12  |
-------------------------
| true		|   13  |
-------------------------
| false		|   14  |
-------------------------
| and 		|   15  |
-------------------------
| or		|   16  |
-------------------------
| :		|   17  |
-------------------------
| ;		|   18  |
-------------------------
| ,     	|   19  |
-------------------------
| .		|   20  |
-------------------------
| +		|   21  |
-------------------------
| * 		|   22  |
-------------------------
| / 		|   23  |
-------------------------
| (		|   24  |
-------------------------
| )		|   25  |
-------------------------
| [		|   26  |
-------------------------
| ]     	|   27  |
-------------------------
| { 		|   28  |
-------------------------
| } 		|   29  |
-------------------------
| -		|   30  |
-------------------------
| <     	|   31  |
-------------------------
| >		|   32  |
-------------------------
| =		|   33  |
-------------------------
| / 		|   34  |
-------------------------

